// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ToneTimer.djinni

#import "TTSettingsView+Private.h"
#import "TTSettingsView.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace djinni_generated {

class SettingsView::ObjcProxy final
: public ::tonetimer::SettingsView
, public ::djinni::ObjcProxyCache::Handle<ObjcType>
{
public:
    using Handle::Handle;
    void setIntervalDuration(int32_t c_d) override
    {
        @autoreleasepool {
            [Handle::get() setIntervalDuration:(::djinni::I32::fromCpp(c_d))];
        }
    }
    void setIntervalBreak(int32_t c_b) override
    {
        @autoreleasepool {
            [Handle::get() setIntervalBreak:(::djinni::I32::fromCpp(c_b))];
        }
    }
    void setSetSize(int32_t c_s) override
    {
        @autoreleasepool {
            [Handle::get() setSetSize:(::djinni::I32::fromCpp(c_s))];
        }
    }
    void setSetBreak(int32_t c_b) override
    {
        @autoreleasepool {
            [Handle::get() setSetBreak:(::djinni::I32::fromCpp(c_b))];
        }
    }
    void setSetCount(int32_t c_c) override
    {
        @autoreleasepool {
            [Handle::get() setSetCount:(::djinni::I32::fromCpp(c_c))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto SettingsView::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto SettingsView::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).Handle::get();
}

}  // namespace djinni_generated
