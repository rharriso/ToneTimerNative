// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ToneTimer.djinni

package rharriso.tonetimer;

import java.util.concurrent.atomic.AtomicBoolean;

/**
 *
 * Settings View
 *
 */
public abstract class SettingsViewModel {
    public abstract void incIntervalDuration();

    public abstract void decIntervalDuration();

    public abstract void incIntervalBreak();

    public abstract void decIntervalBreak();

    public abstract void incSetSize();

    public abstract void decSetSize();

    public abstract void incSetCount();

    public abstract void decSetCount();

    public abstract void incSetBreak();

    public abstract void decSetBreak();

    public static native SettingsViewModel create();

    private static final class CppProxy extends SettingsViewModel
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void incIntervalDuration()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_incIntervalDuration(this.nativeRef);
        }
        private native void native_incIntervalDuration(long _nativeRef);

        @Override
        public void decIntervalDuration()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_decIntervalDuration(this.nativeRef);
        }
        private native void native_decIntervalDuration(long _nativeRef);

        @Override
        public void incIntervalBreak()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_incIntervalBreak(this.nativeRef);
        }
        private native void native_incIntervalBreak(long _nativeRef);

        @Override
        public void decIntervalBreak()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_decIntervalBreak(this.nativeRef);
        }
        private native void native_decIntervalBreak(long _nativeRef);

        @Override
        public void incSetSize()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_incSetSize(this.nativeRef);
        }
        private native void native_incSetSize(long _nativeRef);

        @Override
        public void decSetSize()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_decSetSize(this.nativeRef);
        }
        private native void native_decSetSize(long _nativeRef);

        @Override
        public void incSetCount()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_incSetCount(this.nativeRef);
        }
        private native void native_incSetCount(long _nativeRef);

        @Override
        public void decSetCount()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_decSetCount(this.nativeRef);
        }
        private native void native_decSetCount(long _nativeRef);

        @Override
        public void incSetBreak()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_incSetBreak(this.nativeRef);
        }
        private native void native_incSetBreak(long _nativeRef);

        @Override
        public void decSetBreak()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_decSetBreak(this.nativeRef);
        }
        private native void native_decSetBreak(long _nativeRef);
    }
}
