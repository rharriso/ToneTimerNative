// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from Intervals.djinni

package rharriso.tonetimer;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class SettingsViewModel {
    public abstract void setIntervalDuration(int d);

    public abstract void setIntervalBreak(int b);

    public abstract void setSetSize(int s);

    public abstract void setSetBreak(int b);

    public abstract void setSetCount(int c);

    private static final class CppProxy extends SettingsViewModel
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public void setIntervalDuration(int d)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setIntervalDuration(this.nativeRef, d);
        }
        private native void native_setIntervalDuration(long _nativeRef, int d);

        @Override
        public void setIntervalBreak(int b)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setIntervalBreak(this.nativeRef, b);
        }
        private native void native_setIntervalBreak(long _nativeRef, int b);

        @Override
        public void setSetSize(int s)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setSetSize(this.nativeRef, s);
        }
        private native void native_setSetSize(long _nativeRef, int s);

        @Override
        public void setSetBreak(int b)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setSetBreak(this.nativeRef, b);
        }
        private native void native_setSetBreak(long _nativeRef, int b);

        @Override
        public void setSetCount(int c)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setSetCount(this.nativeRef, c);
        }
        private native void native_setSetCount(long _nativeRef, int c);
    }
}
